diff -ruN ./src/gui/CMakeLists.txt ../frontend-sdl2.3/src/gui/CMakeLists.txt
--- ./src/gui/CMakeLists.txt	2025-01-22 22:15:14.187815673 +0100
+++ ../frontend-sdl2.3/src/gui/CMakeLists.txt	2025-01-22 22:14:32.956493249 +0100
@@ -18,9 +18,16 @@
         MAIN_DEPENDENCY "${CMAKE_SOURCE_DIR}/src/resources/LiberationSans-Regular.ttf"
         )
 
+add_custom_command(OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/DejavuFont.h"
+        COMMAND ${BINARY_TO_COMPRESSED_EXECUTABLE} "${CMAKE_SOURCE_DIR}/src/resources/DejaVuSans.ttf" Dejavu > "${CMAKE_CURRENT_BINARY_DIR}/DejavuFont.h"
+        MAIN_DEPENDENCY "${CMAKE_SOURCE_DIR}/src/resources/DejaVuSans.ttf"
+        )
+
+
 add_library(ProjectMSDL-GUI STATIC
         "${CMAKE_CURRENT_BINARY_DIR}/AnonymousProFont.h"
         "${CMAKE_CURRENT_BINARY_DIR}/LiberationSansFont.h"
+        "${CMAKE_CURRENT_BINARY_DIR}/DejavuFont.h"
         AboutWindow.cpp
         AboutWindow.h
         FileChooser.cpp
@@ -56,6 +63,7 @@
         PUBLIC
         Poco::Util
         ImGui
+        stb
         libprojectM::projectM
         "$<$<PLATFORM_ID:Darwin>:-framework ApplicationServices>"
         )
diff -ruN ./src/gui/PresetSelection.cpp ../frontend-sdl2.3/src/gui/PresetSelection.cpp
--- ./src/gui/PresetSelection.cpp	2025-01-22 22:15:14.187815673 +0100
+++ ../frontend-sdl2.3/src/gui/PresetSelection.cpp	2025-01-22 22:14:32.956493249 +0100
@@ -65,6 +65,7 @@
         {
             _fileChooser.Show();
         }
+        
     }
     ImGui::End();
 }
\ No newline at end of file
diff -ruN ./src/gui/ProjectMGUI.cpp ../frontend-sdl2.3/src/gui/ProjectMGUI.cpp
--- ./src/gui/ProjectMGUI.cpp	2025-01-22 22:15:14.187815673 +0100
+++ ../frontend-sdl2.3/src/gui/ProjectMGUI.cpp	2025-01-22 22:14:32.956493249 +0100
@@ -2,6 +2,7 @@
 
 #include "AnonymousProFont.h"
 #include "LiberationSansFont.h"
+#include "DejavuFont.h"
 #include "ProjectMWrapper.h"
 #include "SDLRenderingWindow.h"
 
@@ -9,6 +10,7 @@
 #include "imgui_impl_opengl3.h"
 #include "imgui_impl_sdl2.h"
 
+
 #include <Poco/NotificationCenter.h>
 
 #include <Poco/Util/Application.h>
@@ -51,6 +53,19 @@
     auto& style = ImGui::GetStyle();
     style.WindowMinSize = {128, 128};
 
+    std::string DataDir = Poco::Path::dataHome().append("projectMSDL/");
+    std::string file = DataDir;
+    //7printf("DataDir: '%s'\n",DataDir.c_str());
+    //7printf("locked: '%s'\n",std::string(file+"locked.png").c_str());
+    bool ret = LoadTextureFromFile(std::string(file+"locked.png").c_str(), &lock_image_texture, &lock_image_width, &lock_image_height);
+    IM_ASSERT(ret);
+    ret = LoadTextureFromFile(std::string(file+"shuffle.png").c_str(), &shuffle_image_texture, &shuffle_image_width, &shuffle_image_height);
+    IM_ASSERT(ret);
+    ret = LoadTextureFromFile(std::string(file+"star0.png").c_str(), &star0_image_texture, &star0_image_width, &star0_image_height);
+    IM_ASSERT(ret);
+    ret = LoadTextureFromFile(std::string(file+"star1.png").c_str(), &star1_image_texture, &star1_image_width, &star1_image_height);
+    IM_ASSERT(ret);
+    
     Poco::NotificationCenter::defaultCenter().addObserver(_displayToastNotificationObserver);
 }
 
@@ -94,8 +109,12 @@
     config.MergeMode = true;
 
     io.Fonts->Clear();
-    _uiFont = io.Fonts->AddFontFromMemoryCompressedTTF(&AnonymousPro_compressed_data, AnonymousPro_compressed_size, floor(24.0f * _textScalingFactor));
-    _toastFont = io.Fonts->AddFontFromMemoryCompressedTTF(&LiberationSans_compressed_data, LiberationSans_compressed_size, floor(40.0f * _textScalingFactor));
+    _uiFont = io.Fonts->AddFontFromMemoryCompressedTTF(&AnonymousPro_compressed_data, AnonymousPro_compressed_size, floor(48.0f * _textScalingFactor));
+    _dejavuFont = io.Fonts->AddFontFromMemoryCompressedTTF(&Dejavu_compressed_data, Dejavu_compressed_size, floor(64.0f * _textScalingFactor));
+    _toastFont = io.Fonts->AddFontFromMemoryCompressedTTF(&LiberationSans_compressed_data, LiberationSans_compressed_size, floor(96.0f * _textScalingFactor));
+    _dejavuFontL = io.Fonts->AddFontFromMemoryCompressedTTF(&Dejavu_compressed_data, Dejavu_compressed_size, floor(128.0f * _textScalingFactor));
+    _kaffeeFont = io.Fonts->AddFontFromMemoryCompressedTTF(&LiberationSans_compressed_data, LiberationSans_compressed_size, floor(148.0f * _textScalingFactor));
+    //_freeFont = io.Fonts->AddFontFromMemoryCompressedTTF(&FreeMonoBold_compressed_data, FreeMonoBold_compressed_size, floor(96.0f * _textScalingFactor));
     io.Fonts->Build();
     ImGui_ImplOpenGL3_CreateFontsTexture();
 
@@ -125,7 +144,7 @@
 void ProjectMGUI::Draw()
 {
     // Don't render UI at all if there's no need.
-    if (!_toast && !_visible)
+    if (!_toast && !_visible && !_permTextVisible)
     {
         return;
     }
@@ -148,10 +167,14 @@
 
     if (_toast)
     {
-        if (!_toast->Draw(secondsSinceLastFrame))
-        {
-            _toast.reset();
+        if(_toast->getToastText().find("PRESET:")==0){
+            _permText = _toast->getToastText().substr(strlen("PRESET:")-1);
+            _permText = _permText.substr(_permText.find_last_of("/")+1); // remove path prefix
+            _permText = _permText.substr(0,_permText.size()-5); // remove '.milk' extension
+            //fprintf(stderr,"_permText: '%s'\n",_permText.c_str());
         }
+        //if (!_toast->Draw(secondsSinceLastFrame)){_toast.reset();}
+        _toast.reset();
     }
 
     if (_visible)
@@ -161,6 +184,14 @@
         _aboutWindow.Draw();
         _helpWindow.Draw();
     }
+    
+    //either menu or permanent info visible
+    if(_permTextVisible && !_visible)
+    { 
+        if (_permText.size()>0){       
+            DrawPermText(_permText);    
+        }
+    }
 
     ImGui::Render();
     ImGui_ImplOpenGL3_RenderDrawData(ImGui::GetDrawData());
@@ -188,6 +219,11 @@
     ImGui::PushFont(_uiFont);
 }
 
+void ProjectMGUI::PushFreeFont()
+{
+    ImGui::PushFont(_freeFont);
+}
+
 void ProjectMGUI::PopFont()
 {
     ImGui::PopFont();
@@ -210,8 +246,6 @@
 
 float ProjectMGUI::GetScalingFactor()
 {
-    int windowWidth;
-    int windowHeight;
     int renderWidth;
     int renderHeight;
 
@@ -230,3 +264,147 @@
         _toast = std::make_unique<ToastMessage>(notification->ToastText(), 3.0f);
     }
 }
+
+void ProjectMGUI::DrawPermText(std::string permText)
+{
+    constexpr ImGuiWindowFlags windowFlags = ImGuiWindowFlags_NoDecoration |
+                                             ImGuiWindowFlags_AlwaysAutoResize |
+                                             ImGuiWindowFlags_NoSavedSettings |
+                                             ImGuiWindowFlags_NoFocusOnAppearing |
+                                             ImGuiWindowFlags_NoNav |
+                                             ImGuiWindowFlags_NoMove;
+    
+    bool locked = false;
+    bool shuffle = false;
+    if (Poco::Util::Application::instance().config().getBool("projectM.presetLocked", true)){
+        locked = true;
+    }
+    if (Poco::Util::Application::instance().config().getBool("projectM.shuffleEnabled", true)){
+        shuffle = true;
+    }
+    if(!_visible){
+
+    ImGui::SetNextWindowPos(ImVec2(0.0f, 0.0f), ImGuiCond_Always, ImVec2(0.0f, 0.0f));
+    float alpha = 0.6f;
+    int textWidth;
+    int playcountWidth;
+    ImGui::SetNextWindowBgAlpha(0.35f * alpha);
+    ImGui::Begin("PermText", &_permTextVisible, windowFlags);
+    ImFont* FontList[5]{_kaffeeFont,_dejavuFontL,_toastFont,_dejavuFont,_uiFont};
+    int font_index = 0;
+    int cursor_x = 0;
+    if(shuffle){
+        ImGui::Image((ImTextureID)(intptr_t)shuffle_image_texture, ImVec2(shuffle_image_width, shuffle_image_height));    
+        ImGui::SameLine();
+        cursor_x += shuffle_image_width;
+    }
+    if(locked){
+        ImGui::Image((ImTextureID)(intptr_t)lock_image_texture, ImVec2(lock_image_width, lock_image_height));
+        ImGui::SameLine();
+        cursor_x += lock_image_width;
+    }
+    cursor_x += 32;
+    SDL_GetWindowSize(_renderingWindow, &windowWidth, &windowHeight);
+    float ww = windowWidth - cursor_x;
+    ImGui::PushFont(FontList[font_index]);
+    
+    do{
+        ImGui::PopFont();
+        ImGui::PushFont(FontList[font_index++]);
+        if(font_index>4)break;
+        textWidth   = ImGui::CalcTextSize(_permText.c_str()).x;
+    
+    
+    }while(textWidth > ww);
+    ww += cursor_x;
+    //printf("cx %d tw %d ww %d \n", cursor_x, textWidth, windowWidth);
+    ImGui::Text(" %s ", _permText.c_str());
+    PopFont();
+
+    int rating = _projectMWrapper->GetRating();
+    int playcount = _projectMWrapper->GetPlayCount();
+    std::string spc = std::to_string(playcount);
+
+    int i=0;
+    ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(0, 0));
+    while(i<rating){
+        ImGui::Image((ImTextureID)(intptr_t)star1_image_texture, ImVec2(star1_image_width, star1_image_height));
+        ImGui::SameLine();
+        ++i;
+    }
+    int i2=5-rating;
+    while(i2){
+        ImGui::Image((ImTextureID)(intptr_t)star0_image_texture, ImVec2(star0_image_width, star0_image_height));
+        ImGui::SameLine();  
+        --i2;
+    }
+    ImGui::PopStyleVar();
+    ImGui::Dummy(ImVec2(2*star0_image_width, 0.0f));
+  
+    ImGui::PushFont(_kaffeeFont);
+    playcountWidth = ImGui::CalcTextSize(spc.c_str()).x;
+    ImGui::SameLine(ImGui::GetWindowWidth()-(playcountWidth+24));
+
+    ImGui::Text("%s",spc.c_str());
+    ImGui::PopFont();
+    
+    if (!_broughtToFront){
+        ImGui::SetWindowFocus();
+        _broughtToFront = true;
+    }
+    ImGui::End();
+
+    } // if(!Visible()){
+    
+}
+
+
+
+// Simple helper function to load an image into a OpenGL texture with common settings
+bool ProjectMGUI::LoadTextureFromMemory(const void* data, size_t data_size, GLuint* out_texture, int* out_width, int* out_height)
+{
+    // Load from file
+    int image_width = 0;
+    int image_height = 0;
+    unsigned char* image_data = stbi_load_from_memory((const unsigned char*)data, (int)data_size, &image_width, &image_height, NULL, 4);
+    if (image_data == NULL)
+        return false;
+
+    // Create a OpenGL texture identifier
+    GLuint image_texture;
+    glGenTextures(1, &image_texture);
+    glBindTexture(GL_TEXTURE_2D, image_texture);
+
+    // Setup filtering parameters for display
+    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
+    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
+
+    // Upload pixels into texture
+    glPixelStorei(GL_UNPACK_ROW_LENGTH, 0);
+    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, image_width, image_height, 0, GL_RGBA, GL_UNSIGNED_BYTE, image_data);
+    stbi_image_free(image_data);
+
+    *out_texture = image_texture;
+    *out_width = image_width;
+    *out_height = image_height;
+
+    return true;
+}
+
+// Open and read a file, then forward to LoadTextureFromMemory()
+bool ProjectMGUI::LoadTextureFromFile(const char* file_name, GLuint* out_texture, int* out_width, int* out_height)
+{
+    FILE* f = fopen(file_name, "rb");
+    if (f == NULL)
+        return false;
+    fseek(f, 0, SEEK_END);
+    size_t file_size = (size_t)ftell(f);
+    if (file_size == -1)
+        return false;
+    fseek(f, 0, SEEK_SET);
+    void* file_data = IM_ALLOC(file_size);
+    fread(file_data, 1, file_size, f);
+    bool ret = LoadTextureFromMemory(file_data, file_size, out_texture, out_width, out_height);
+    IM_FREE(file_data);
+    return ret;
+}
\ No newline at end of file
diff -ruN ./src/gui/ProjectMGUI.h ../frontend-sdl2.3/src/gui/ProjectMGUI.h
--- ./src/gui/ProjectMGUI.h	2025-01-22 22:15:14.187815673 +0100
+++ ../frontend-sdl2.3/src/gui/ProjectMGUI.h	2025-01-22 22:14:32.956493249 +0100
@@ -9,7 +9,8 @@
 #include "notifications/DisplayToastNotification.h"
 
 #include <SDL2/SDL.h>
-
+#include "stb/stb_image.h"
+#include "GL/gl.h"
 #include <Poco/Logger.h>
 #include <Poco/NObserver.h>
 
@@ -85,6 +86,11 @@
     void PushUIFont();
 
     /**
+     * @brief Pushes the "Free" font to the render stack
+     */
+    void PushFreeFont();
+
+    /**
      * @brief Pops the last font from the stack
      */
     void PopFont();
@@ -114,12 +120,17 @@
     Poco::NObserver<ProjectMGUI, DisplayToastNotification> _displayToastNotificationObserver{*this, &ProjectMGUI::DisplayToastNotificationHandler};
 
     std::string _uiIniFileName; //!< Path and filename of the UI configuration (positions etc.)
+    std::string ConfigDir;
 
     SDL_Window* _renderingWindow{nullptr}; //!< Pointer to the SDL window used for rendering.
     SDL_GLContext _glContext{nullptr}; //!< Pointer to the OpenGL context associated with the window.
     ImFont* _uiFont{nullptr}; //!< Main UI font (monospaced).
     ImFont* _toastFont{nullptr}; //!< Toast message font (sans-serif, larger).
-
+    ImFont* _freeFont{nullptr};    //!< Fonts.
+    ImFont* _dejavuFont{nullptr};  //!< Fonts.
+    ImFont* _dejavuFontL{nullptr}; //!< Fonts.
+    ImFont* _kaffeeFont{nullptr};  //!< Fonts.
+    
     uint64_t _lastFrameTicks{0}; //!< Tick count of the last frame (see SDL_GetTicks64)
 
     float _textScalingFactor{0.0f}; //!< The text scaling factor.
@@ -134,4 +145,32 @@
     bool _visible{false}; //!< Flag for settings window visibility.
 
     Poco::Logger& _logger{Poco::Logger::get("ProjectMGUI")}; //!< The class logger.
+
+    std::string _permText;
+    bool _broughtToFront{false};
+    bool _permTextVisible{true};
+
+    int lock_image_width = 0;
+    int lock_image_height = 0;
+    GLuint lock_image_texture = 0;
+    
+    int shuffle_image_width = 0;
+    int shuffle_image_height = 0;
+    GLuint shuffle_image_texture = 0;
+
+    int    star0_image_width = 0;
+    int    star0_image_height = 0;
+    GLuint star0_image_texture = 0;
+
+    int    star1_image_width = 0;
+    int    star1_image_height = 0;
+    GLuint star1_image_texture = 0;
+
+    int windowWidth;
+    int windowHeight;
+    
+    void DrawPermText(std::string permText);
+    bool LoadTextureFromFile(const char* file_name, GLuint* out_texture, int* out_width, int* out_height);
+    bool LoadTextureFromMemory(const void* data, size_t data_size, GLuint* out_texture, int* out_width, int* out_height);
+
 };
diff -ruN ./src/gui/ToastMessage.cpp ../frontend-sdl2.3/src/gui/ToastMessage.cpp
--- ./src/gui/ToastMessage.cpp	2025-01-22 22:15:14.187815673 +0100
+++ ../frontend-sdl2.3/src/gui/ToastMessage.cpp	2025-01-22 22:14:32.956493249 +0100
@@ -48,3 +48,4 @@
 
     return _displayTimeLeft > .0f;
 }
+
diff -ruN ./src/gui/ToastMessage.h ../frontend-sdl2.3/src/gui/ToastMessage.h
--- ./src/gui/ToastMessage.h	2025-01-22 22:15:14.188815681 +0100
+++ ../frontend-sdl2.3/src/gui/ToastMessage.h	2025-01-22 22:14:32.956493249 +0100
@@ -17,6 +17,7 @@
      * @return True if the toast message should still be displayed, false if not.
      */
     bool Draw(float lastFrameTime);
+    std::string getToastText(){return _toastText;}
 
 private:
 
diff -ruN ./src/projectMSDL.properties ../frontend-sdl2.3/src/projectMSDL.properties
--- ./src/projectMSDL.properties	1970-01-01 01:00:00.000000000 +0100
+++ ../frontend-sdl2.3/src/projectMSDL.properties	2025-01-22 22:14:32.955493241 +0100
@@ -0,0 +1,154 @@
+### Application window settings
+
+# If set to true, the application will start in fullscreen mode
+window.fullscreen = false
+
+# If set to true, the application windows will have no window decorations if the OS supports it.
+# This will possibly make the window immovable.
+window.borderless = false
+
+# Set the monitor to initially display the window on.
+# 0 will use system defaults for placement, 1 and above select a specific monitor.
+# If the number is too large, that last available monitor is used.
+window.monitor = 0
+
+# Two fullscreen modes are supported:
+# - windowed: Uses a borderless window, filling the current monitor.
+#             Does not change the current resolution.
+# - exclusive: Sets the resolution to window.fullscreen.width/height and runs in exclusive mode,
+#              like a game.
+window.fullscreen.exclusiveMode = false
+
+# Only used if fullscreen mode is "exclusive"
+# If any value is set to 0, the nearest available fullscreen resolution for the current window size is used.
+window.fullscreen.width = 0
+window.fullscreen.height = 0
+
+# Window size if not in fullscreen
+window.width = 1024
+window.height = 768
+
+# Override system default window position
+window.overridePosition = false
+
+# If overridePosition is true, the window will be placed at these coordinates.
+# Note this will include any window decoration, to the actual window contents might be offset to the bottom-right.
+window.left = 0
+window.top = 0
+
+# Wait for vertical sync interval before displaying the next frame.
+# This will limit max FPS to the vertical sync frequency but prevents tearing.
+window.waitForVerticalSync = true
+
+# Tries to use adaptive vertical sync if waitForVerticalSync is enabled.
+# When using a monitor capable of adaptive sync, setting projectM.fps to 0 gives the best results.
+window.adaptiveVerticalSync = true
+
+# If true, displays the current preset name (and locked state) in the window title.
+# If false, the window title is fixed to "projectM".
+window.displayPresetNameInTitle = true
+
+### projectM settings
+
+# Default path where projectMSDL will search for presets and textures. The directory will be searched recursively.
+# To add additional preset paths, add them as shown in the examples below.
+projectM.presetPath = /usr/local//presets
+#projectM.presetPath.1 = /another/preset/path
+#projectM.presetPath.2 = /yet/another/preset/path
+
+# Default path where projectMSDL will search for additional textures. The directory will be searched recursively.
+# To add additional texture paths, add them as shown in the examples below.
+projectM.texturePath = /usr/local//textures
+#projectM.texturePath.1 = /another/texture/path
+#projectM.texturePath.2 = /yet/another/texture/path
+
+# If true, displays the built-in projectM logo preset on startup.
+projectM.enableSplash = false
+
+# Preset display duration in seconds. If the time has passed, a soft cut is done to the next preset.
+projectM.displayDuration = 30
+
+# If enabled, presets are selected randomly from the current playlist. Otherwise, they are played in order.
+projectM.shuffleEnabled = true
+
+# If enabled, the current/initial preset can only be changed manually.
+projectM.presetLocked = false
+
+# Target FPS, usually 60.
+projectM.fps = 60
+
+# Per-pixel mesh size. This is the grid in which "per-pixel" code is executed, once per cell.
+# Do not set this value too high, as it severely impacts performance. On low-end hardware, set this to a small
+# value, e.g. 64x32. This does *NOT* affect the actual render/shader resolution!
+projectM.meshX = 200
+projectM.meshY = 125
+
+# Transition time in seconds for soft cuts
+projectM.transitionDuration = 3
+
+# Hard cuts are immediate presets transitions on an intensive beat.
+# If enabled, after "hardCutDuration" seconds have passed and an intensive beat is detected,
+# a hard cut is performed. "hardCutDuration" should be set lower than "displayDuration" to have an effect.
+projectM.hardCutsEnabled = false
+projectM.hardCutDuration = 20
+
+# Controls aspect ration correction in presets. Not all presets use aspect ratio, so this setting  only has an effect
+# on presets using the aspect ration actively.
+projectM.aspectCorrectionEnabled = true
+
+
+### Logging settings
+
+# For detailed information on how to configure logging, please refer to the POCO documentation:
+# https://docs.pocoproject.org/current/Poco.Util.LoggingConfigurator.html
+
+# Set log level to debug for all components
+#logging.loggers.root.level = debug
+
+
+
+### Logging configuration
+
+# Verbose log format, includes process/thread ID, source etc.
+# See https://docs.pocoproject.org/current/Poco.PatternFormatter.html for available placeholders.
+# The "times" property can be either set to "local" (default) or "UTC".
+logging.formatters.verbose.class = PatternFormatter
+logging.formatters.verbose.pattern = %Y-%m-%dT%h:%M:%S.%iZ [%P][%I] %p: [%s] %t
+logging.formatters.verbose.times = local
+
+# Simple log format, only date/time and the message
+logging.formatters.simple.class = PatternFormatter
+logging.formatters.simple.pattern = %Y-%m-%dT%h:%M:%SZ %t
+logging.formatters.simple.times = local
+
+# Default file log, creates a new one if it reaches 1 MiB and keeps a single old log.
+# See https://docs.pocoproject.org/current/Poco.FileChannel.html for all possible options.
+logging.channels.file.class = FileChannel
+logging.channels.file.path = ${system.configHomeDir}/projectM/${application.baseName}.log
+logging.channels.file.rotation = 1M
+logging.channels.file.archive = number
+logging.channels.file.compress = false
+logging.channels.file.purgeCount = 1
+logging.channels.file.flush = false
+logging.channels.file.formatter = simple
+
+# Console logging. Only available on UNIX platforms and inside a Windows debugging session.
+logging.channels.console.class = ConsoleChannel
+logging.channels.console.formatter = simple
+
+# Duplicates log messages to both console and file channels.
+logging.channels.split.class = SplitterChannel
+logging.channels.split.channel = console,file
+
+# Memory queue for async logging to improve performance.
+logging.channels.async.class = AsyncChannel
+logging.channels.async.channel = split
+
+# Default logging settings.
+logging.loggers.root.level = information
+logging.loggers.root.channel = async
+
+# You can configure log levels, channels etc. for each message source (logger) individually.
+# See https://docs.pocoproject.org/current/Poco.Util.LoggingConfigurator.html for details.
+# Example:
+#     logging.loggers.AudioCapture.level = debug
diff -ruN ./src/ProjectMWrapper.cpp ../frontend-sdl2.3/src/ProjectMWrapper.cpp
--- ./src/ProjectMWrapper.cpp	2025-01-22 22:15:14.186815665 +0100
+++ ../frontend-sdl2.3/src/ProjectMWrapper.cpp	2025-01-22 22:14:32.955493241 +0100
@@ -12,6 +12,15 @@
 #include <SDL2/SDL_opengl.h>
 
 #include <cmath>
+#include <map>
+
+inline bool ProjectMWrapper::put(int rating, int playcount, std::string name)
+{
+    sprintf(buffer, "%d %d %s\n", rating, playcount, name.c_str() );
+    size_t i = fwrite (buffer , strlen(buffer), sizeof(char), filedb);
+    //printf("[%ld] %ld buffer: %s", i, strlen(buffer), buffer);
+    return true;
+}
 
 const char* ProjectMWrapper::name() const
 {
@@ -25,6 +34,7 @@
     _userConfig = projectMSDLApp.UserConfiguration();
     poco_information_f1(_logger, "Events enabled: %?d", _projectMConfigView->eventsEnabled());
 
+
     if (!_projectM)
     {
         auto& sdlWindow = app.getSubsystem<SDLRenderingWindow>();
@@ -87,7 +97,7 @@
         }
 
         projectm_playlist_set_shuffle(_playlist, _projectMConfigView->getBool("shuffleEnabled", true));
-
+        
         for (const auto& presetPath : presetPaths)
         {
             Poco::File file(presetPath);
@@ -105,8 +115,36 @@
         projectm_playlist_sort(_playlist, 0, projectm_playlist_size(_playlist), SORT_PREDICATE_FILENAME_ONLY, SORT_ORDER_ASCENDING);
 
         projectm_playlist_set_preset_switched_event_callback(_playlist, &ProjectMWrapper::PresetSwitchedEvent, static_cast<void*>(this));
+
+        
+        
+    }
+    
+    filedb = fopen("dbpresets", "r+");
+    if(filedb){
+        char* line = NULL;
+        size_t len = 0;
+        size_t pli = 0;
+        int rating, playcount;
+        ssize_t nread;
+        std::string name;
+        while ((nread = getline(&line, &len, filedb)) != -1){
+            std::stringstream is(line);
+            is << line;
+            is >> rating;
+            is >> playcount;
+            name = std::string(line).substr(2);
+            name = name.substr(name.find_first_of(" ")+1);
+            name = name.substr(0,name.size()-1);
+            //printf("<- %d %d '%s'\n",rating, playcount, name.c_str());
+            dbpm.insert(std::pair<std::string,DBPreset>(name,DBPreset{rating,playcount}));
+            //printf("* %d %d '%s'\n",dbpm[name].rating, dbpm[name].playcount, name.c_str());
+        }
+        if(line)free(line);
+        fclose(filedb);
     }
 
+
     Poco::NotificationCenter::defaultCenter().addObserver(_playbackControlNotificationObserver);
 
     // Observe user configuration changes (set via the settings window)
@@ -119,6 +157,25 @@
     _userConfig->propertyRemoved -= Poco::delegate(this, &ProjectMWrapper::OnConfigurationPropertyRemoved);
     _userConfig->propertyChanged -= Poco::delegate(this, &ProjectMWrapper::OnConfigurationPropertyChanged);
     Poco::NotificationCenter::defaultCenter().removeObserver(_playbackControlNotificationObserver);
+    if(filedb)fclose(filedb);
+    filedb = fopen("dbpresets", "w");
+        
+    size_t pli = 0;
+    char* plitem=NULL;
+    while(true){
+        plitem  =  projectm_playlist_item(_playlist, pli);
+        if(plitem){
+            if(dbpm.count(plitem)>0 && dbpm[plitem].playcount>0){
+                put(dbpm[plitem].rating, dbpm[plitem].playcount, std::string(plitem) );
+                free(plitem);
+            }
+            ++pli;
+        }else{
+            printf("last\n");
+            break;
+        }
+    }
+
 
     if (_projectM)
     {
@@ -131,6 +188,10 @@
         projectm_playlist_destroy(_playlist);
         _playlist = nullptr;
     }
+    
+    if(filedb)fclose(filedb);
+
+
 }
 
 projectm_handle ProjectMWrapper::ProjectM() const
@@ -206,11 +267,36 @@
     return projectMRuntimeVersion;
 }
 
+int ProjectMWrapper::PresetExists(std::string pName){
+    int c = dbpm.count(pName);
+    return c;
+}
+
 void ProjectMWrapper::PresetSwitchedEvent(bool isHardCut, unsigned int index, void* context)
 {
     auto that = reinterpret_cast<ProjectMWrapper*>(context);
     auto presetName = projectm_playlist_item(that->_playlist, index);
+    std::string pname(presetName);
+    
+    that->_presetName = pname;
+    int pc = 0;
+    size_t c = that->dbpm.count(pname);
+    int r = projectm_get_preset_rating(that->_projectM);
+    printf("dbmp:[%ld] (%d) '%s'\n", c, r, pname.c_str());
+    if(c>0){
+        pc = that->dbpm[pname].playcount;
+        r = that->dbpm[pname].rating;
+    }else{
+        that->dbpm.insert(std::pair<std::string,DBPreset>(pname,DBPreset{r,pc}));        
+        that->dbpm[pname].rating = r;
+    }
+    ++that->dbpm[pname].playcount;  // = that->dbpm[pname].playcount +1;
+    that->_presetRating = that->dbpm[pname].rating;
+    that->_presetPlaycount = that->dbpm[pname].playcount;
+
     poco_information_f1(that->_logger, "Displaying preset: %s", std::string(presetName));
+    Poco::NotificationCenter::defaultCenter().postNotification(
+        new DisplayToastNotification(Poco::format("PRESET: %s", std::string(presetName))));
     projectm_playlist_free_string(presetName);
 
     Poco::NotificationCenter::defaultCenter().postNotification(new UpdateWindowTitleNotification);
@@ -332,3 +418,34 @@
         projectm_set_mesh_size(_projectM, _projectMConfigView->getUInt64("meshX", 48), _projectMConfigView->getUInt64("meshY", 32));
     }
 }
+
+int ProjectMWrapper::GetRating(){
+    if(!dbpm.count(_presetName))return projectm_get_preset_rating(_projectM);
+    return dbpm[_presetName].rating;
+}
+
+int ProjectMWrapper::GetPlayCount(){
+    return dbpm[_presetName].playcount;
+}
+
+int ProjectMWrapper::GetPlayCount(std::string pName){
+    return dbpm[pName].playcount;
+}
+
+void ProjectMWrapper::RatingDown(){
+    if( dbpm[_presetName].rating > 0 ) dbpm[_presetName].rating--;
+}
+
+void ProjectMWrapper::RatingUp(){
+    if( dbpm[_presetName].rating < 5 ) dbpm[_presetName].rating++;
+}
+
+void ProjectMWrapper::SetRating(int rating){
+    if(rating <0 || rating >5)return;
+    dbpm[_presetName].rating = rating;
+}
+
+void ProjectMWrapper::SetPlaycount(int playcount){
+    dbpm[_presetName].playcount = playcount;
+}
+
diff -ruN ./src/ProjectMWrapper.h ../frontend-sdl2.3/src/ProjectMWrapper.h
--- ./src/ProjectMWrapper.h	2025-01-22 22:15:14.187815673 +0100
+++ ../frontend-sdl2.3/src/ProjectMWrapper.h	2025-01-22 22:14:32.955493241 +0100
@@ -7,11 +7,28 @@
 
 #include <Poco/Logger.h>
 #include <Poco/NObserver.h>
+//#include <Poco/LinearHashTable.h>
 
 #include <Poco/Util/AbstractConfiguration.h>
 #include <Poco/Util/Subsystem.h>
-
 #include <memory>
+#include <fstream>
+#include <limits>
+#include <iostream>
+#include <sstream>
+#include <unistd.h>
+
+struct PresetItem{
+        int rating{0};
+        int playcount{0};
+        std::string name;
+};
+
+struct DBPreset{
+        int rating{0};
+        int playcount{0};
+};
+
 
 class ProjectMWrapper : public Poco::Util::Subsystem
 {
@@ -75,6 +92,19 @@
      */
     std::string ProjectMRuntimeVersion();
 
+    int PresetExists(std::string pName);
+
+    int GetRating();
+    int GetPlayCount();
+    int GetPlayCount(std::string pName);
+
+
+    void RatingUp();
+    void RatingDown();
+    void SetRating(int rating);
+    void SetPlaycount(int playcount);
+
+
 private:
     /**
      * @brief projectM callback. Called whenever a preset is switched.
@@ -109,4 +139,17 @@
     Poco::NObserver<ProjectMWrapper, PlaybackControlNotification> _playbackControlNotificationObserver{*this, &ProjectMWrapper::PlaybackControlNotificationHandler};
 
     Poco::Logger& _logger{Poco::Logger::get("SDLRenderingWindow")}; //!< The class logger.
+    
+    typedef std::map<std::string, DBPreset> DBPM;
+    DBPM dbpm;
+
+    std::string _presetName;
+    int _presetRating;
+    int _presetPlaycount;
+    
+    FILE *filedb;
+    char buffer[1024];
+    
+    bool put(int rating, int playcount, std::string name);
+
 };
diff -ruN ./src/RenderLoop.cpp ../frontend-sdl2.3/src/RenderLoop.cpp
--- ./src/RenderLoop.cpp	2025-01-22 22:15:14.187815673 +0100
+++ ../frontend-sdl2.3/src/RenderLoop.cpp	2025-01-22 22:14:32.955493241 +0100
@@ -170,7 +170,6 @@
     {
         return;
     }
-
     switch (keyCode)
     {
         case SDLK_ESCAPE:
@@ -254,6 +253,41 @@
             // Decrease beat sensitivity
             _projectMWrapper.ChangeBeatSensitivity(-0.01f);
             break;
+
+        case SDLK_LEFT:
+            _projectMWrapper.RatingDown();
+            break;
+
+        case SDLK_RIGHT:
+            _projectMWrapper.RatingUp();
+            break;
+        case SDLK_TAB: 
+            _projectMWrapper.SetRating(0); 
+            break;
+        
+        case SDLK_o: 
+            _projectMWrapper.SetRating(0); 
+            break;
+
+        case SDLK_0: 
+            _projectMWrapper.SetRating(0); 
+            break;
+        case SDLK_1: 
+            _projectMWrapper.SetRating(1); 
+            break;
+        case SDLK_2: 
+            _projectMWrapper.SetRating(2); 
+            break;
+        case SDLK_3: 
+            _projectMWrapper.SetRating(3); 
+            break;
+        case SDLK_4: 
+            _projectMWrapper.SetRating(4); 
+            break;
+        case SDLK_5: 
+            _projectMWrapper.SetRating(5); 
+            break;
+
     }
 }
 
Binary files ./src/resources/DejaVuSans.ttf and ../frontend-sdl2.3/src/resources/DejaVuSans.ttf differ
Binary files ./src/resources/locked.png and ../frontend-sdl2.3/src/resources/locked.png differ
Binary files ./src/resources/shuffle.png and ../frontend-sdl2.3/src/resources/shuffle.png differ
Binary files ./src/resources/star0.png and ../frontend-sdl2.3/src/resources/star0.png differ
Binary files ./src/resources/star1.png and ../frontend-sdl2.3/src/resources/star1.png differ
